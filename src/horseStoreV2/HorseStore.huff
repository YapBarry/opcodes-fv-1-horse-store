/* Import */
#include "../../lib/huffmate/src/data-structures/Hashmap.huff"

// Define Interfaces for the functions
#define function mintHorse() nonpayable returns()
#define function feedHorse(uint256) nonpayable returns()
#define function isHappyHorse(uint256) view returns (bool)
#define function horseIdToFedTimeStamp(uint256) view returns(uint256)
#define function HORSE_HAPPY_IF_FED_WITHIN() view returns(uint256)

// Storage Slot
#define constant HORSE_FED_TIMESTAMP_LOCATION = FREE_STORAGE_POINTER() // Storage slot for the mapping

// Define constants
#define constant NFT_NAME = 0x486f72736553746f7265 // "HorseStore"
#define constant NFT_SYMBOL = 0x4853 // "HS"
#define constant HORSE_HAPPY_IF_FED_WITHIN =  0x15180 // 1 day - 86400 seconds

// Define interface for mapping?
// mapping(uint256 id => uint256 lastFedTimeStamp) public horseIdToFedTimeStamp;
#define function getlastFedTimeStamp(uint) public
#define function setlastFedTimeStamp(uint, uint) public

#define macro IS_HAPPY_HORSE() takes(0) returns(0) {
    // if (horseIdToFedTimeStamp[horseId] <= block.timestamp - HORSE_HAPPY_IF_FED_WITHIN) return false
    0x04 calldataload               // [horseId]
    [HORSE_FED_TIMESTAMP_LOCATION]  // [HORSE_FED_TIMESTAMP_LOCATION, horseId]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [horseFedTimestamp]
    timestamp                       // [timestamp, horseFedTimestamp]
    dup2 dup2 sub                   // [timestamp - horseFedTimestamp, timestamp, horseFedTimestamp]
    [HORSE_HAPPY_IF_FED_WITHIN]     // [HORSE_HAPPY_IF_FED_WITHIN, timestamp - horseFedTimestamp, timestamp, horseFedTimestamp]
    gt                              // [horse_has_been_fed_within_one_day, timestamp, horseFedTimestamp]
    start_return_true jumpi         // [timestamp, horseFedTimestamp]
    eq                              // [timestamp == horseFedTimestamp]
    start_return jump               

    start_return_true:              
    0x01                            // [1, timestamp, horseFedTimestamp]
    
    start_return:                   // [timestamp == horseFedTimestamp]
    0x00 mstore                     
    0x20 0x00 return                      
}

#define macro GET_HORSE_FED_TIMESTAMP(0x00) takes(0) returns(0) {
    0x04 calldataload               // [horseId]
    [HORSE_FED_TIMESTAMP_LOCATION]  // [HORSE_FED_TIMESTAMP_LOCATION, horseId]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [horseFedTimestamp]
    0x00 mstore                     // []   // Memory: [0x00: horseFedTimestamp]
    0x20 0x00 returns               // []
}

#define macro feedHorse() takes(0) returns(0) {
    timestamp           // [timestamp]
    0x04 calldataload   // [horseId, timestamp]
    // sstore the timestamp with the horseId key
    [HORSE_FED_TIMESTAMP_LOCATION] // [HORSE_FED_TIMESTAMP_LOCATION ,horseId, timestamp]
    STORE_ELEMENT_FROM_KEYS(0x00)   // []
    stop
}

#define macro MAIN = takes(0) returns(0){
    // load the function selector
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(mintHorse) eq mintHorseJump jumpi
    dup1 __FUNC_SIG(feedHorse) eq feedHorseJump jumpi
    dup1 __FUNC_SIG(isHappyHorse) eq isHappyHorseJump jumpi
    dup1 __FUNC_SIG(horseIdToFedTimeStamp) eq horseIdToFedTimeStamp jumpi
    dup1 __FUNC_SIG(HORSE_HAPPY_IF_FED_WITHIN) eq horseHappyFedWithin jumpi

    0x00 0x00 revert

    mintHorseJump:
        MINT_HORSE()
    feedHorseJump:
        FEED_HORSE()
    isHappyHorseJump:
        IS_HAPPY_HORSE()
    horseIdToFedTimeStamp:
        GET_HORSE_FED_TIMESTAMP()
    horseHappyFedWithin:
        HORSE_HAPPY_IF_FED_WITHIN()
}

#define macro GET_LAST_FED_TIMESTAMP = takes(0) returns(0){
    
}

#define macro SET_LAST_FED_TIMESTAMP = takes(0) returns(0){
    
}